// <auto-generated />
#pragma warning disable

namespace Polyfills;

#if FeatureRuntimeInformation && !NET

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
static class OperatingSystemCache
{
    static Version? windowsVersion;
    static Version? freeBsdVersion;
    static Version? androidVersion;
    static bool? isAndroid;
    static Version? macOSVersion;

    static string RunProcess(string name, string arguments)
    {
        using var process = new Process()
        {
            StartInfo = new()
            {
                FileName = name,
                Arguments = arguments,
                RedirectStandardInput = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            }
        };
        process.Start();
        process.WaitForExit();

        return process.StandardOutput.ReadToEnd();
    }

    public static bool IsMacOSVersionAtLeast(int major, int minor = 0, int build = 0)
    {
        if (!OperatingSystem.IsMacOS())
        {
            return false;
        }

        if (macOSVersion == null)
        {
            var versionString = RunProcess("/usr/bin/sw_vers", "")
                .Replace("ProductVersion:", string.Empty)
                .Replace(" ", string.Empty);

            macOSVersion = Version.Parse(versionString.Split(Environment.NewLine.ToCharArray())[0]);
        }

        return macOSVersion >= new Version(major, minor, build);
    }

    public static bool IsFreeBSDVersionAtLeast(int major, int minor, int build = 0, int revision = 0)
    {
        if (!OperatingSystem.IsFreeBSD())
        {
            return false;
        }

        if (freeBsdVersion == null)
        {
            var versionString = Environment.OSVersion.VersionString
                .Replace("Unix", string.Empty)
                .Replace("FreeBSD", string.Empty)
                .Replace("-release", string.Empty)
                .Replace(" ", string.Empty);

            freeBsdVersion = Version.Parse(versionString);
        }

        return freeBsdVersion >= new Version(major, minor, build, revision);
    }

    public static bool IsWindowsVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0)
    {
        if (!OperatingSystem.IsWindows())
        {
            return false;
        }

        if (windowsVersion == null)
        {
            var input = RuntimeInformation.OSDescription
                .Replace("Microsoft Windows", string.Empty)
                .Replace(" ", string.Empty);
            windowsVersion = Version.Parse(input);
        }

        return windowsVersion >= new Version(major, minor, build, revision);
    }

    public static bool IsAndroid()
    {
        if (!isAndroid.HasValue)
        {
            try
            {
                isAndroid = RunProcess("uname", "-o")
                    .Replace(" ", string.Empty)
                    .ToLower()
                    .Equals("android");
            }
            catch
            {
                isAndroid = false;
            }
        }

        return isAndroid.Value;
    }

    public static bool IsAndroidVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0)
    {
        if (!IsAndroid())
        {
            return false;
        }

        if (androidVersion == null)
        {
            var result = RunProcess("getprop", "ro.build.version.release")
                .Replace(" ", string.Empty);

            androidVersion = Version.Parse(result);
        }

        return androidVersion >= new Version(major, minor, build, revision);
    }
}
#endif