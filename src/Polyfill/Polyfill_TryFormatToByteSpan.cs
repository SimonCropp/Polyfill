// <auto-generated />
#pragma warning disable

#if FeatureMemory
namespace Polyfills;

using System.Text;
using System;
using System.Diagnostics.CodeAnalysis;

static partial class Polyfill
{
#if !NET8_0_OR_GREATER

    static bool DoFormat<T>(this T target, Span<byte> destination, out int written, [StringSyntax(StringSyntaxAttribute.TimeSpanFormat)] ReadOnlySpan<char> format = default, IFormatProvider? formatProvider = null)
        where T : IFormattable
    {
        string result;

        if (format.Length == 0)
        {
            result = target.ToString(null, formatProvider);
        }
        else
        {
            result = target.ToString(format.ToString(), formatProvider);
        }

        if (result.Length == 0)
        {
            written = 0;
            return true;
        }

        return Encoding.UTF8.TryGetBytes(result.AsSpan(), destination, out written);
    }

    /// <summary>
    /// Tries to format the value of the current instance into the provided span of characters.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryformat?view=net-10.0#system-datetimeoffset-tryformat(system-span((system-byte))-system-int32@-system-readonlyspan((system-char))-system-iformatprovider)
    public static bool TryFormat(this DateTimeOffset target, Span<byte> utf8Destination, out int bytesWritten, [StringSyntax(StringSyntaxAttribute.DateTimeFormat)] ReadOnlySpan<char> format = default, IFormatProvider? provider = default) =>
        target.DoFormat(utf8Destination, out bytesWritten, format, provider);

    /// <summary>
    /// Tries to format the value of the current instance into the provided span of characters.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryformat?view=net-10.0#system-datetime-tryformat(system-span((system-byte))-system-int32@-system-readonlyspan((system-char))-system-iformatprovider)
    public static bool TryFormat(this DateTime target, Span<byte> utf8Destination, out int bytesWritten, [StringSyntax(StringSyntaxAttribute.DateOnlyFormat)] ReadOnlySpan<char> format = default, IFormatProvider? provider = default) =>
        target.DoFormat(utf8Destination, out bytesWritten, format, provider);

#endif
}
#endif