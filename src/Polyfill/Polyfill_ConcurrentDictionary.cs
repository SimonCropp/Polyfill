// <auto-generated />
#pragma warning disable

#if !NETCOREAPP && !NETSTANDARD2_1_OR_GREATER && !NET472_OR_GREATER

namespace Polyfills;

using System;
using System.Collections.Concurrent;

static partial class Polyfill
{
    /// <summary>
    /// Adds a key/value pair to the <see cref="ConcurrentDictionary{TKey,TValue}"/>
    /// if the key does not already exist.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd?view=net-10.0#system-collections-concurrent-concurrentdictionary-2-getoradd-1(-0-system-func((-0-0-1))-0)
    public static TValue GetOrAdd<TKey, TValue, TArg>(this ConcurrentDictionary<TKey, TValue> target, TKey key, Func<TKey, TArg, TValue> valueFactory, TArg factoryArgument)
        where TKey : notnull
    {
        // Implementation based on https://github.com/dotnet/runtime/issues/13978#issuecomment-69494764.
        // Because this API is intended to be used in high performance scenarios where avoiding allocations
        // is important, we can't delegate to the existing `GetOrAdd`2`, as that would allocate a closure
        // over `factoryArgument`.

        if (target is null)
        {
            throw new ArgumentNullException(nameof(target));
        }

        if (key is null)
        {
            throw new ArgumentNullException(nameof(target));
        }
        if (valueFactory is null)
        {
            throw new ArgumentNullException(nameof(valueFactory));
        }

        while (true)
        {
            TValue value;
            if (target.TryGetValue(key, out value))
            {
                return value;
            }

            value = valueFactory(key, factoryArgument);
            if (target.TryAdd(key, value))
            {
                return value;
            }
        }
    }
}
#endif