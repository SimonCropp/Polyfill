// <auto-generated />
#pragma warning disable

namespace Polyfills;

#if FeatureRuntimeInformation

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]

#if PolyPublic
public
#endif
static class OperatingSystemPolyfill
{
    static bool IsOsVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0) =>
        Environment.OSVersion.Version >= new Version(major, minor, build, revision);

#if !NET

    static Version? windowsVersion;
    static Version? freeBsdVersion;
    static Version? androidVersion;
    static bool? isAndroid;
    static Version? macOSVersion;

    static string RunProcess(string name, string arguments)
    {
        using var process = new Process()
        {
            StartInfo = new()
            {
                FileName = name,
                Arguments = arguments,
                RedirectStandardInput = false,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            }
        };
        process.Start();
        process.WaitForExit();

        return process.StandardOutput.ReadToEnd();
    }
#endif

    /// <summary>
    /// Indicates whether the current application is running on the specified platform.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isosplatform?view=net-10.0
    public static bool IsOSPlatform(string platform) =>
#if NET
        OperatingSystem.IsOSPlatform(platform);
#else
        RuntimeInformation.IsOSPlatform(OSPlatform.Create(platform));
#endif

    /// <summary>
    /// Checks if the operating system version is greater than or equal to the specified platform version. This method can be used to guard APIs that were added in the specified OS version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isosplatformversionatleast?view=net-10.0
    public static bool IsOSPlatformVersionAtLeast(string platform, int major, int minor = 0, int build = 0, int revision = 0) =>
#if NET
        OperatingSystem.IsOSPlatformVersionAtLeast(platform, major, minor, build, revision);
#else
        IsOSPlatform(platform) &&
        IsOsVersionAtLeast(major, minor, build, revision);
#endif

    /// <summary>
    /// Indicates whether the current application is running on Windows.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.iswindows?view=net-10.0
    public static bool IsWindows() =>
#if NET
        OperatingSystem.IsWindows();
#else
        RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
#endif

    /// <summary>
    /// Checks if the Windows version (returned by RtlGetVersion) is greater than or equal to the specified version. This method can be used to guard APIs that were added in the specified Windows version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.iswindowsversionatleast?view=net-10.0
    public static bool IsWindowsVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0)
    {
#if NET
        return OperatingSystem.IsWindowsVersionAtLeast(major, minor, build, revision);
#else
        if (!IsWindows())
        {
            return false;
        }

        if (windowsVersion == null)
        {
            var input = RuntimeInformation.OSDescription
                .Replace("Microsoft Windows", string.Empty)
                .Replace(" ", string.Empty);
            windowsVersion = Version.Parse(input);
        }

        return windowsVersion >= new Version(major, minor, build, revision);
#endif
    }

    /// <summary>
    /// Indicates whether the current application is running on macOS.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.ismacos?view=net-10.0
    public static bool IsMacOS() =>
#if NET
        OperatingSystem.IsMacOS();
#else
        RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
#endif

    /// <summary>
    /// Indicates whether the current application is running on Mac Catalyst.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.ismaccatalyst?view=net-10.0
    public static bool IsMacCatalyst() =>
#if NET6_0_OR_GREATER
        OperatingSystem.IsMacCatalyst();
#else
        IsMacOS() ||
        IsIOS();
#endif

    /// <summary>
    /// Checks if the macOS version (returned by libobjc.get_operatingSystemVersion) is greater than or equal to the specified version. This method can be used to guard APIs that were added in the specified macOS version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.ismacosversionatleast?view=net-10.0
    public static bool IsMacOSVersionAtLeast(int major, int minor = 0, int build = 0)
    {
#if NET
        return OperatingSystem.IsMacOSVersionAtLeast(major, minor, build);
#else
        if (!IsMacOS())
        {
            return false;
        }

        if (macOSVersion == null)
        {
            var versionString = RunProcess("/usr/bin/sw_vers", "")
                .Replace("ProductVersion:", string.Empty)
                .Replace(" ", string.Empty);

            macOSVersion = Version.Parse(versionString.Split(Environment.NewLine.ToCharArray())[0]);
        }

        return macOSVersion >= new Version(major, minor, build);
#endif
    }

    /// <summary>
    /// Check for the Mac Catalyst version (iOS version as presented in Apple documentation) with a ≤ version comparison. Used to guard APIs that were added in the given Mac Catalyst release.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.ismaccatalystversionatleast?view=net-10.0
    public static bool IsMacCatalystVersionAtLeast(int major, int minor = 0, int build = 0) =>
#if NET6_0_OR_GREATER
        OperatingSystem.IsMacCatalystVersionAtLeast(major, minor, build);
#else
        IsMacCatalyst() &&
        IsOsVersionAtLeast(major, minor, build);
#endif

    /// <summary>
    /// Indicates whether the current application is running on Linux.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.islinux?view=net-10.0
    public static bool IsLinux() =>
#if NET
        OperatingSystem.IsLinux();
#else
        RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
#endif

    /// <summary>
    /// Indicates whether the current application is running on FreeBSD.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isfreebsd?view=net-10.0
    public static bool IsFreeBSD() =>
#if NET
        OperatingSystem.IsFreeBSD();
#else
        RuntimeInformation.OSDescription.ToLower().Contains("freebsd");
#endif

    /// <summary>
    /// Checks if the FreeBSD version (returned by the Linux command uname) is greater than or equal to the specified version.
    /// This method can be used to guard APIs that were added in the specified version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isfreebsdversionatleast?view=net-10.0
    public static bool IsFreeBSDVersionAtLeast(int major, int minor, int build = 0, int revision = 0)
    {
#if NET
        return OperatingSystem.IsFreeBSDVersionAtLeast(major, minor, build, revision);
#else
        if (!IsFreeBSD())
        {
            return false;
        }

        if (freeBsdVersion == null)
        {
            var versionString = Environment.OSVersion.VersionString
                .Replace("Unix", string.Empty)
                .Replace("FreeBSD", string.Empty)
                .Replace("-release", string.Empty)
                .Replace(" ", string.Empty);

            freeBsdVersion = Version.Parse(versionString);
        }

        return freeBsdVersion >= new Version(major, minor, build, revision);
#endif
    }

    /// <summary>
    /// Indicates whether the current application is running on iOS or MacCatalyst.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isios?view=net-10.0
    public static bool IsIOS()
    {
#if NET
        return OperatingSystem.IsIOS();
#else
        var description = RuntimeInformation.OSDescription.ToLower();
        return description.Contains("ios") ||
               description.Contains("ipados") ||
               (description.Contains("iphone") &&
                description.Contains("os"));
#endif
    }

    /// <summary>
    /// Checks if the iOS/MacCatalyst version (returned by libobjc.get_operatingSystemVersion) is greater than or equal to the specified version. This method can be used to guard APIs that were added in the specified iOS version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isiosversionatleast?view=net-10.0
    public static bool IsIOSVersionAtLeast(int major, int minor = 0, int build = 0) =>
#if NET
        OperatingSystem.IsIOSVersionAtLeast(major, minor, build);
#else
        IsIOS() &&
        IsOsVersionAtLeast(major, minor, build);
#endif

    /// <summary>
    /// Indicates whether the current application is running on tvOS.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.istvos?view=net-10.0
    public static bool IsTvOS() =>
#if NET
        OperatingSystem.IsTvOS();
#else
        RuntimeInformation.OSDescription.ToLower().Contains("tvos");
#endif

    /// <summary>
    /// Checks if the tvOS version (returned by libobjc.get_operatingSystemVersion) is greater than or equal to the specified version. This method can be used to guard APIs that were added in the specified tvOS version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.istvosversionatleast?view=net-10.0
    public static bool IsTvOSVersionAtLeast(int major, int minor = 0, int build = 0) =>
#if NET
        OperatingSystem.IsTvOSVersionAtLeast(major, minor, build);
#else
        IsTvOS() &&
        IsOsVersionAtLeast(major, minor, build);
#endif

    /// <summary>
    /// Indicates whether the current application is running on Android.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isandroid?view=net-10.0
    public static bool IsAndroid()
    {
#if NET
        return OperatingSystem.IsAndroid();
#else
        if (!isAndroid.HasValue)
        {
            try
            {
                isAndroid = RunProcess("uname", "-o")
                    .Replace(" ", string.Empty)
                    .ToLower()
                    .Equals("android");
            }
            catch
            {
                isAndroid = false;
            }
        }

        return isAndroid.Value;
#endif
    }

    /// <summary>
    /// Checks if the Android version (returned by the Linux command uname) is greater than or equal to the specified version. This method can be used to guard APIs that were added in the specified version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isandroidversionatleast?view=net-10.0
    public static bool IsAndroidVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0)
    {
#if NET
        return OperatingSystem.IsAndroidVersionAtLeast(major, minor, build, revision);
#else
        if (!IsAndroid())
        {
            return false;
        }

        if (androidVersion == null)
        {
            var result = RunProcess("getprop", "ro.build.version.release")
                .Replace(" ", string.Empty);

            androidVersion = Version.Parse(result);
        }

        return androidVersion >= new Version(major, minor, build, revision);
#endif
    }

    /// <summary>
    /// Indicates whether the current application is running on watchOS.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.iswatchos?view=net-10.0
    public static bool IsWatchOS() =>
#if NET
        OperatingSystem.IsWatchOS();
#else
        IsIOS() ||
        RuntimeInformation.OSDescription.ToLower().Contains("watchos");
#endif

    /// <summary>
    /// Checks if the watchOS version (returned by libobjc.get_operatingSystemVersion) is greater than or equal to the specified version. This method can be used to guard APIs that were added in the specified watchOS version.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.iswatchosversionatleast?view=net-10.0
    public static bool IsWatchOSVersionAtLeast(int major, int minor = 0, int build = 0) =>
#if NET
        OperatingSystem.IsWatchOSVersionAtLeast(major, minor, build);
#else
        IsWatchOS() &&
        IsOsVersionAtLeast(major, minor, build);
#endif

    /// <summary>
    /// Indicates whether the current application is running as WASI.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.iswasi?view=net-10.0
    public static bool IsWasi() =>
#if NET8_0_OR_GREATER
        OperatingSystem.IsWasi();
#else
        RuntimeInformation.FrameworkDescription.ToLower().Contains("wasi");
#endif

    /// <summary>
    /// Indicates whether the current application is running as WASM in a browser.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.operatingsystem.isbrowser?view=net-10.0
    public static bool IsBrowser() =>
#if NET
        OperatingSystem.IsBrowser();
#else
        RuntimeInformation.FrameworkDescription.Contains(".NET WebAssembly");
#endif
}

#endif