// <auto-generated />

#pragma warning disable
using System;
using System.Diagnostics.CodeAnalysis;
using System.Text.RegularExpressions;
using Link = System.ComponentModel.DescriptionAttribute;

[ExcludeFromCodeCoverage]
#if PolyPublic
public
#endif
static partial class RegexPolyfill
{
#if HAS_SPAN
    /// <summary>
    /// Indicates whether the specified regular expression finds a match in the specified input span, using the specified matching options and time-out interval.
    /// </summary>
    /// <returns>true if the regular expression finds a match; otherwise, false.</returns>
    [Link("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
    public static bool IsMatch(ReadOnlySpan<char> input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    {
#if NET7_0_OR_GREATER
       return Regex.IsMatch(input, pattern, options, matchTimeout);
#else
       return Regex.IsMatch(input.ToString(), pattern, options, matchTimeout);
#endif
    }

    /// <summary>
    /// Indicates whether the specified regular expression finds a match in the specified input span, using the specified matching options.
    /// </summary>
    /// <returns>true if the regular expression finds a match; otherwise, false.</returns>
    [Link("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
    public static bool IsMatch(ReadOnlySpan<char> input, string pattern, System.Text.RegularExpressions.RegexOptions options)
    {
#if NET7_0_OR_GREATER
       return Regex.IsMatch(input, pattern, options);
#else
       return Regex.IsMatch(input.ToString(), pattern, options);
#endif
    }

    /// <summary>
    /// Indicates whether the specified regular expression finds a match in the specified input span.
    /// </summary>
    /// <returns>true if the regular expression finds a match; otherwise, false.</returns>
    [Link("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string)")]
    public static bool IsMatch(ReadOnlySpan<char> input, string pattern)
    {
#if NET7_0_OR_GREATER
       return Regex.IsMatch(input, pattern);
#else
       return Regex.IsMatch(input.ToString(), pattern);
#endif
    }
#endif
}
