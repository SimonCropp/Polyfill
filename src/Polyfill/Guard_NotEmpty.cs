// <auto-generated />

namespace Polyfills;

using System.Runtime.CompilerServices;

#pragma warning disable

#if PolyGuard

using System.Linq;
using System.Runtime.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.IO;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

#if PolyPublic
public
#endif
static partial class Guard
{
    public static void NotEmpty(string? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            return;
        }

        if (value.Length == 0)
        {
            throw new ArgumentException("Argument cannot be empty.", argumentName);
        }
    }

    public static void NotEmpty<T>(
        [NotNull] T? value,
        [CallerArgumentExpression("value")] string argumentName = "")
        where T : IEnumerable
    {
        if (value is null)
        {
            return;
        }

        if (value is ICollection<T> genericCollection)
        {
            if (genericCollection.Count == 0)
            {
                throw new ArgumentException("Argument cannot be empty.", argumentName);
            }
        }

        if (value is ICollection collection)
        {
            if (collection.Count == 0)
            {
                throw new ArgumentException("Argument cannot be empty.", argumentName);
            }
        }

        if (value is IReadOnlyCollection<T> readOnlyCollection)
        {
            if (readOnlyCollection.Count == 0)
            {
                throw new ArgumentException("Argument cannot be empty.", argumentName);
            }
        }

        var enumerator = value.GetEnumerator();
        try
        {
            if (enumerator.MoveNext())
            {
                throw new ArgumentException("Argument cannot be empty.", argumentName);
            }
        }
        finally
        {
            if (enumerator is IDisposable disposable)
            {
                disposable.Dispose();
            }
        }
    }
}
#endif