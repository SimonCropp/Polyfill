// <auto-generated />
#pragma warning disable

namespace Polyfills;

using System;
using System.Diagnostics;
using System.Threading;
using System.Diagnostics.CodeAnalysis;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
#if PolyPublic
public
#endif
static partial class RandomPolyfill
{
    /// <summary>
    /// Provides a thread-safe Random instance that may be used concurrently from any thread.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.random.shared?view=net-10.0
    public static Random Shared { get; } =
#if NET6_0_OR_GREATER
        Random.Shared;
#else
        new ThreadSafeRandom();

    class ThreadSafeRandom : Random
    {
        Lock locker = new();

        public override int Next()
        {
            lock (locker)
                return base.Next();
        }

        public override int Next(int maxValue)
        {
            lock (locker)
                return base.Next(maxValue);
        }

        public override int Next(int minValue, int maxValue)
        {
            lock (locker)
                return base.Next(minValue, maxValue);
        }

        public override void NextBytes(byte[] buffer)
        {
            lock (locker)
                base.NextBytes(buffer);
        }

        public override double NextDouble()
        {
            lock (locker)
                return base.NextDouble();
        }

        protected override double Sample()
        {
            lock (locker)
                return base.Sample();
        }
    }
#endif
}