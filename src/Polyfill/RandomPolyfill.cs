// <auto-generated />
#pragma warning disable

namespace Polyfills;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
#if PolyPublic
public
#endif
static partial class RandomPolyfill
{
    public static Random Shared { get; } = CreateRandomInstance();

    private static Random CreateRandomInstance()
    {
#if NET6_0_OR_GREATER
        return Random.Shared;
#else
        return new ThreadSafeRandom();
#endif
    }

    private class ThreadSafeRandom : Random
    {
        private Lock _lock = new();

        public override int Next()
        {
            lock (_lock)
            {
                return base.Next();
            }
        }

        public override int Next(int maxValue)
        {
            lock (_lock)
            {
                return base.Next(maxValue);
            }
        }

        public override int Next(int minValue, int maxValue)
        {
            lock (_lock)
            {
                return base.Next(minValue, maxValue);
            }
        }

        public override void NextBytes(byte[] buffer)
        {
            lock (_lock)
            {
                base.NextBytes(buffer);
            }
        }

        public override double NextDouble()
        {
            lock (_lock)
            {
                return base.NextDouble();
            }
        }

        protected override double Sample()
        {
            lock (_lock)
            {
                return base.Sample();
            }
        }

        public override bool Equals(object? obj)
        {
            lock (_lock)
            {
                return base.Equals(obj);
            }
        }

        public override int GetHashCode()
        {
            lock (_lock)
            {
                return base.GetHashCode();
            }
        }

        public override string ToString()
        {
            lock (_lock)
            {
                return base.ToString();
            }
        }
    }
}