// <auto-generated />



#pragma warning disable

#if PolyGuard


namespace Polyfills;

using System.Linq;
using System.Runtime.CompilerServices;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.IO;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

#if PolyPublic
public
#endif

static partial class Guard
{
    public static string AgainstNullOrEmpty(
        [NotNull] string? value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            throw new ArgumentNullException(argumentName);
        }

        return value;
    }

    public static T[] AgainstNullOrEmpty<T>(
        [NotNull] T[]? value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Length == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }

    public static void AgainstNullOrEmpty<T>(
        [NotNull] IEnumerable<T>? value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.TryGetNonEnumeratedCount(out var count))
        {
            if (count == 0)
            {
                throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
            }
        }

        if (value.Count() == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }
    }

    public static IReadOnlyDictionary<T, K> AgainstNullOrEmpty<T, K>([NotNull] IReadOnlyDictionary<T, K>? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Count == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }
}
#endif