// <auto-generated />

namespace Polyfills;

using System.Runtime.CompilerServices;

#pragma warning disable

#if PolyGuard

using System;
using System.IO;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

#if PolyPublic
public
#endif

static partial class Guard
{
    public static string AgainstNullOrEmpty([NotNull] string? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            throw new ArgumentNullException(argumentName);
        }

        return value;
    }

    public static T[] AgainstNullOrEmpty<T>([NotNull] T[]? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Length == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }

    public static IReadOnlyCollection<T> AgainstNullOrEmpty<T>([NotNull] IReadOnlyList<T>? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Count == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }

    public static IReadOnlyCollection<T> AgainstNullOrEmpty<T>([NotNull] IReadOnlyCollection<T>? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Count == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }
    public static IReadOnlyCollection<T> AgainstNullOrEmpty<T>([NotNull] T? value, [CallerArgumentExpression("value")] string argumentName = "")
    where T: IReadOnlyCollection<>
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Count == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }

    public static IReadOnlyDictionary<T, K> AgainstNullOrEmpty<T, K>([NotNull] IReadOnlyDictionary<T, K>? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Count == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }
}
#endif