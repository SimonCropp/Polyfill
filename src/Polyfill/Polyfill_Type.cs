// <auto-generated />

#pragma warning disable

namespace Polyfills;

using System;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Linq;

static partial class Polyfill
{
#if !NETCOREAPP2_1_OR_GREATER && !NETSTANDARD2_1_OR_GREATER
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.hassamemetadatadefinitionas?view=net-10.0
    public static bool HasSameMetadataDefinitionAs(this MemberInfo target, MemberInfo other) =>
        target.MetadataToken == other.MetadataToken &&
        target.Module.Equals(other.Module);
#endif

#if !NET9_0_OR_GREATER && !NETFRAMEWORK && !NETSTANDARD2_0 && !NETCOREAPP2_0
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.type.getmethod?view=net-10.0#system-type-getmethod(system-string-system-int32-system-reflection-bindingflags-system-type())
    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods | DynamicallyAccessedMemberTypes.NonPublicMethods)]
    public static MethodInfo? GetMethod(this Type target, string name, int genericParameterCount, BindingFlags bindingAttr, Type[] types)
    {
#if NETFRAMEWORK || NETSTANDARD || NETCOREAPP
        return target.GetMethod(name, genericParameterCount, bindingAttr, null, types, null);
#else
        var methods = target.GetMethods(bindingAttr);
        if (genericParameterCount == 0)
        {
            foreach (var method in methods)
            {
                if (method.IsGenericMethod)
                {
                    continue;
                }

                if (IsMatch(method))
                {
                    return method;
                }
            }
        }
        else
        {
            foreach (var method in methods)
            {
                if (!method.IsGenericMethod)
                {
                    continue;
                }

                var genericArguments = method.GetGenericArguments();
                if (genericParameterCount != genericArguments.Length)
                {
                    continue;
                }

                if (IsMatch(method))
                {
                    return method;
                }
            }
        }

        return null;

        bool IsMatch(MethodInfo method) =>
            name == method.Name &&
            method.GetParameters().Select(_ => _.ParameterType).SequenceEqual(types);
#endif
    }
#endif

    /// <summary>
    /// Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter?view=net-10.0
    public static bool IsGenericMethodParameter(this Type target) =>
#if NETCOREAPP2_1_OR_GREATER || NETSTANDARD2_1_OR_GREATER
        target.IsGenericMethodParameter;
#else
        target.IsGenericParameter &&
        target.DeclaringMethod != null;
#endif

    /// <summary>
    /// Generic version of Type.IsAssignableTo https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto.
    /// </summary>
    public static bool IsAssignableTo<T>(this Type target) =>
        typeof(T).IsAssignableFrom(target);

    /// <summary>
    /// Generic version of Type.IsAssignableFrom https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom.
    /// </summary>
    public static bool IsAssignableFrom<T>(this Type target) =>
        target.IsAssignableFrom(typeof(T));

#if !NET
    /// <summary>
    /// Determines whether the current type can be assigned to a variable of the specified targetType.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto?view=net-10.0
    public static bool IsAssignableTo(this Type target, [NotNullWhen(true)] Type? targetType) =>
        targetType?.IsAssignableFrom(target) ?? false;
#endif

#if !NET6_0_OR_GREATER

    /// <summary>
    /// Searches for the MemberInfo on the current Type that matches the specified MemberInfo.
    /// </summary>
    /// <param name="type">The MemberInfo to find on the current Type.</param>
    /// <param name="member">The MemberInfo to find on the current Type.</param>
    /// <returns>An object representing the member on the current Type that matches the specified member.</returns>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.type.getmemberwithsamemetadatadefinitionas?view=net-10.0
    internal static MemberInfo GetMemberWithSameMetadataDefinitionAs(
        this Type type,
        MemberInfo member)
    {
        const BindingFlags all = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance;
        foreach (var info in type.GetMembers(all))
        {
            if (info.HasSameMetadataDefinitionAs(member))
            {
                return info;
            }
        }

        throw new MissingMemberException(type.FullName, member.Name);
    }

#endif
}