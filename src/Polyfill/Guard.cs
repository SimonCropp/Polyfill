// <auto-generated />

namespace Polyfill2;

using System.Runtime.CompilerServices;

#pragma warning disable

#if PolyGuard

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
#if PolyPublic
public
#endif
static class Guard
{
    public static T AgainstNull<T>(
        [NotNull] T? argument,
        [CallerArgumentExpression("argument")] string? name = null)
        where T : class
    {
        if (argument is null)
        {
            throw new ArgumentNullException(name);
        }

        return argument;
    }

    public static string AgainstNullOrEmpty([NotNull] string? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            throw new ArgumentNullException(argumentName);
        }

        return value;
    }

    public static void AgainstEmpty(string? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(value))
        {
            throw new ArgumentNullException(argumentName);
        }
    }

    public static T[] AgainstNullOrEmpty<T>([NotNull] T[]? value, [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value is null)
        {
            throw new ArgumentNullException(argumentName);
        }

        if (value.Length == 0)
        {
            throw new ArgumentNullException(argumentName, "Argument cannot be empty.");
        }

        return value;
    }

    public static void FileExists(string path, [CallerArgumentExpression("path")] string argumentName = "")
    {
        AgainstNullOrEmpty(path, argumentName);
        if (!File.Exists(path))
        {
            throw new ArgumentException($"File not found. Path: {path}", argumentName);
        }
    }

    public static void DirectoryExists(string path, [CallerArgumentExpression("path")] string argumentName = "")
    {
        AgainstNullOrEmpty(path, argumentName);
        if (!Directory.Exists(path))
        {
            throw new ArgumentException($"Directory not found. Path: {path}", argumentName);
        }
    }
}
#endif