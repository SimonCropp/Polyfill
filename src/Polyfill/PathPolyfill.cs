// <auto-generated />

#pragma warning disable

namespace Polyfills;

using System;
using System.IO;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
#if PolyPublic
public
#endif
static partial class PathPolyfill
{
#if FeatureMemory
    /// <summary>
    /// Returns the directory information for the specified path represented by a character span.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getdirectoryname?view=net-10.0#system-io-path-getdirectoryname(system-readonlyspan((system-char)))
    public static ReadOnlySpan<char> GetDirectoryName(ReadOnlySpan<char> path) =>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP2_1_OR_GREATER
        Path.GetDirectoryName(path);
#else
        Path.GetDirectoryName(path.ToString()).AsSpan();
#endif

    /// <summary>
    /// Returns the file name and extension of a file path that is represented by a read-only character span.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getfilename?view=net-10.0#system-io-path-getfilename(system-readonlyspan((system-char)))
    public static ReadOnlySpan<char> GetFileName(ReadOnlySpan<char> path) =>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP2_1_OR_GREATER
        Path.GetFileName(path);
#else
        Path.GetFileName(path.ToString()).AsSpan();
#endif

    /// <summary>
    /// Returns the file name without the extension of a file path that is represented by a read-only character span.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getfilenamewithoutextension?view=net-10.0#system-io-path-getfilenamewithoutextension(system-readonlyspan((system-char)))
    public static ReadOnlySpan<char> GetFileNameWithoutExtension(ReadOnlySpan<char> path) =>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP2_1_OR_GREATER
        Path.GetFileNameWithoutExtension(path);
#else
        Path.GetFileNameWithoutExtension(path.ToString()).AsSpan();
#endif

    /// <summary>
    /// Determines whether the path represented by the specified character span includes a file name extension.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getfilenamewithoutextension?view=net-10.0#system-io-path-getfilenamewithoutextension(system-readonlyspan((system-char)))
    public static bool HasExtension(ReadOnlySpan<char> path) =>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP2_1_OR_GREATER
        Path.HasExtension(path);
#else
        Path.HasExtension(path.ToString());
#endif

    /// <summary>
    /// Returns the extension of the given path.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getextension?view=net-10.0#system-io-path-getextension(system-readonlyspan((system-char)))
    public static ReadOnlySpan<char> GetExtension(ReadOnlySpan<char> path) =>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP2_1_OR_GREATER
        Path.GetExtension(path);
#else
        Path.GetExtension(path.ToString()).AsSpan();
#endif

    /// <summary>
    /// Combines a span of strings into a path.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-10.0#system-io-path-combine(system-readonlyspan((system-string)))
    public static string Combine(scoped ReadOnlySpan<string> paths) =>
#if NET9_0_OR_GREATER
        Path.Combine(paths);
#else
        Path.Combine(paths.ToArray());
#endif

    /// <summary>
    /// Returns a value that indicates whether the path, specified as a read-only span, ends in a directory separator.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.endsindirectoryseparator?view=net-10.0#system-io-path-endsindirectoryseparator(system-readonlyspan((system-char)))
    public static bool EndsInDirectorySeparator (ReadOnlySpan<char> path) =>
#if NETCOREAPP3_0_OR_GREATER
        Path.EndsInDirectorySeparator(path);
#else
        EndsInDirectorySeparator(path.ToString());
#endif

    /// <summary>
    /// Trims one trailing directory separator beyond the root of the specified path.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.trimendingdirectoryseparator?view=net-10.0#system-io-path-trimendingdirectoryseparator(system-readonlyspan((system-char)))
    public static ReadOnlySpan<char> TrimEndingDirectorySeparator(ReadOnlySpan<char> path) =>
#if NETCOREAPP3_0_OR_GREATER
        Path.TrimEndingDirectorySeparator(path);
#else
        TrimEndingDirectorySeparator(path.ToString()).AsSpan();
#endif

#endif

    /// <summary>
    /// Returns a value that indicates whether the specified path ends in a directory separator.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.endsindirectoryseparator?view=net-10.0#system-io-path-endsindirectoryseparator(system-string)
#if NETCOREAPP3_0_OR_GREATER
    public static bool EndsInDirectorySeparator(string path) =>
        Path.EndsInDirectorySeparator(path);
#else
    public static bool EndsInDirectorySeparator(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return false;
        }

        return IsDirectorySeparator(path[path.Length-1]);
    }
#endif

    /// <summary>
    /// Trims one trailing directory separator beyond the root of the specified path.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.trimendingdirectoryseparator?view=net-10.0#system-io-path-trimendingdirectoryseparator(system-string)
#if NETCOREAPP3_0_OR_GREATER
    public static string TrimEndingDirectorySeparator(string path) =>
        Path.TrimEndingDirectorySeparator(path);
#else
    public static string TrimEndingDirectorySeparator(string path)
    {
        if (EndsInDirectorySeparator(path) &&
            !Path.IsPathRooted(path))
        {
            return path!.Substring(0, path.Length - 1);
        }

        return path;
    }
#endif

    static bool IsDirectorySeparator(char c) =>
        c == Path.DirectorySeparatorChar ||
        c == Path.AltDirectorySeparatorChar;

    /// <summary>
    /// Determines whether the specified file or directory exists.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.io.path.exists?view=net-10.0
#if NET7_0_OR_GREATER
    public static bool Exists(string? path) =>
        Path.Exists(path);
#else
    public static bool Exists(string? path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return false;
        }

        string? fullPath;
        try
        {
            fullPath = Path.GetFullPath(path);
        }
        catch (Exception ex)
            when (ex is ArgumentException or
                      IOException or
                      UnauthorizedAccessException)
        {
            return false;
        }

        return File.Exists(fullPath) || Directory.Exists(fullPath);
    }
#endif
}