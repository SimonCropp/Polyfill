https://github.com/dotnet/core/blob/main/release-notes/6.0/api-diff/.Net/6.0.0_System.Linq.md
https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview2/api-diff/Microsoft.NETCore.App/9.0-preview2_System.IO.md
https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.0/api-diff/Microsoft.NETCore.App/8.0.0_System.Collections.Generic.md
https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.0/api-diff/Microsoft.NETCore.App/8.0.0_System.md
https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.0/api-diff/Microsoft.NETCore.App/7.0.0_System.Collections.Immutable.md


public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate, TSource defaultValue);
public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue);
public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelector);
public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer);
public static TSource LastOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate, TSource defaultValue);
public static TSource LastOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue);
public static TSource Max<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer);
public static TSource Min<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer);
public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate, TSource defaultValue);
public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue);
public static IEnumerable<TSource> Take<TSource>(this IEnumerable<TSource> source, Range range);
public static bool TryGetNonEnumeratedCount<TSource>(this IEnumerable<TSource> source, out int count);
public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector);
public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer);
